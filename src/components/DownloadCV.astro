---
// Componente para descargar el CV en formato PDF
const envVars = {
    GITHUB_URL: import.meta.env.GITHUB_URL || '',
    EMAIL: import.meta.env.EMAIL || '',
    LINKEDIN_URL: import.meta.env.LINKEDIN_URL || '',
    DESCRIPTION_PHRASE: import.meta.env.DESCRIPTION_PHRASE || '',
    PORTFOLIO_NAME: import.meta.env.PORTFOLIO_NAME || 'Pablo Martínez',
    WEB_URL: import.meta.env.WEB_URL || '',
    PHONE: import.meta.env.PHONE || '',
}
---

<button
    id="download-cv-btn"
    class="px-4 py-2 bg-linear-to-r from-cyan-500 to-purple-600 rounded-lg text-white font-semibold hover:shadow-lg hover:shadow-cyan-500/50 transition-all hover:scale-105 flex items-center gap-2"
    title="Descargar CV en PDF"
    data-env={JSON.stringify(envVars)}>
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
        ></path>
    </svg>
    <span class="hidden sm:inline">Descargar CV</span>
</button>

<script>
    import { generateCV } from '../utils/generatePDF.js'

    const downloadBtn = document.getElementById('download-cv-btn') as HTMLButtonElement

    // Función para convertir imagen a base64
    const loadImageAsBase64 = async (url: string): Promise<string> => {
        return new Promise((resolve, reject) => {
            const img = new Image()
            img.crossOrigin = 'Anonymous'
            img.onload = () => {
                const canvas = document.createElement('canvas')
                canvas.width = img.width
                canvas.height = img.height
                const ctx = canvas.getContext('2d')
                if (ctx) {
                    ctx.drawImage(img, 0, 0)
                    resolve(canvas.toDataURL('image/jpeg'))
                } else {
                    reject(new Error('No se pudo obtener el contexto del canvas'))
                }
            }
            img.onerror = () => reject(new Error('Error al cargar la imagen'))
            img.src = url
        })
    }

    downloadBtn?.addEventListener('click', async () => {
        try {
            const envData = downloadBtn.dataset.env
            const envVars = envData ? JSON.parse(envData) : {}

            // Cargar la imagen de perfil
            try {
                const profileImage = await loadImageAsBase64('/img/profile.jpg')
                envVars.PROFILE_IMAGE = profileImage
            } catch (error) {
                console.warn('No se pudo cargar la imagen de perfil:', error)
            }

            generateCV(envVars)
        } catch (error) {
            console.error('Error al generar el PDF:', error)
            alert('Hubo un error al generar el PDF. Por favor, intenta de nuevo.')
        }
    })
</script>
